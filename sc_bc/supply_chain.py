from web3 import Web3
import json
import datetime 

#package is currently with this user
product_id = "" #accept from user

#ganache port
ganache_url = "HTTP://127.0.0.1:7545"
web3 = Web3(Web3.HTTPProvider(ganache_url))

#set and get values
abi = json.loads('[{"constant":true,"inputs":[],"name":"check_status_set_sanitised","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"temperature_check","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"sanitised","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"shipping_time","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"check_status_temperature_check","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"check_status_shipping_time","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"face_mask","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"check_status_face_mask","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_sanitised","type":"bool"},{"name":"_face_mask","type":"bool"},{"name":"_temperature_check","type":"bool"},{"name":"_shipping_time","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]')
bytecode = "6060604052341561000f57600080fd5b60405161062438038061062483398101604052808051906020019091908051906020019091908051906020019091908051820191905050836000806101000a81548160ff02191690831515021790555082600060016101000a81548160ff02191690831515021790555081600060026101000a81548160ff02191690831515021790555080600190805190602001906100a99291906100b3565b5050505050610158565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100f457805160ff1916838001178555610122565b82800160010185558215610122579182015b82811115610121578251825591602001919060010190610106565b5b50905061012f9190610133565b5090565b61015591905b80821115610151576000816000905550600101610139565b5090565b90565b6104bd806101676000396000f30060606040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063330a1ab61461009357806363873a6f146100c057806382827f21146100ed57806385eda1c41461011a5780639e90d35a146101a8578063a935090c146101d5578063c92dd3be14610263578063cf17acd714610290575b600080fd5b341561009e57600080fd5b6100a66102bd565b604051808215151515815260200191505060405180910390f35b34156100cb57600080fd5b6100d36102d3565b604051808215151515815260200191505060405180910390f35b34156100f857600080fd5b6101006102e6565b604051808215151515815260200191505060405180910390f35b341561012557600080fd5b61012d6102f8565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561016d578082015181840152602081019050610152565b50505050905090810190601f16801561019a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101b357600080fd5b6101bb610396565b604051808215151515815260200191505060405180910390f35b34156101e057600080fd5b6101e86103ac565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561022857808201518184015260208101905061020d565b50505050905090810190601f1680156102555780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561026e57600080fd5b610276610454565b604051808215151515815260200191505060405180910390f35b341561029b57600080fd5b6102a3610467565b604051808215151515815260200191505060405180910390f35b60008060009054906101000a900460ff16905090565b600060029054906101000a900460ff1681565b6000809054906101000a900460ff1681565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561038e5780601f106103635761010080835404028352916020019161038e565b820191906000526020600020905b81548152906001019060200180831161037157829003601f168201915b505050505081565b60008060029054906101000a900460ff16905090565b6103b461047d565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561044a5780601f1061041f5761010080835404028352916020019161044a565b820191906000526020600020905b81548152906001019060200180831161042d57829003601f168201915b5050505050905090565b600060019054906101000a900460ff1681565b60008060019054906101000a900460ff16905090565b6020604051908101604052806000815250905600a165627a7a723058202d4877d0c1ecd4e5b25222e10f4f7cb6e5305dd1984196205fa8ec5ef3f772220029"

#PART 1: GET TX_RECEIPT AND SAVE THIS.
 
#FROM ADDRESS ALWAYS USER ADDRESS 
    #TO ADDRESS IS CONTRACT ADDRESS

def create_contract(account_id, sanitised, face_mask, temperature_check):
    #accept index of account for a particular location/user

    #set a default account
    web3.eth.defaultAccount= web3.eth.accounts[account_id]
    Check = web3.eth.contract(abi = abi, bytecode=bytecode)

    shipping_time = str(datetime.datetime.now())
    #after all checks, submit button creates a transaction
    tx_hash = Check.constructor(sanitised, temperature_check, face_mask, shipping_time).transact()
    tx_receipt = web3.eth.waitForTransactionReceipt(tx_hash)
    #SAVE THIS RECEIPT
    return tx_receipt


#PART 2: READ THE RECEIPT FOR CHECK VALUES

def get_checks(tx_receipt):
    d = {}
    contract = web3.eth.contract(address = tx_receipt.contractAddress, abi = abi)

    d['sanitisation'] = contract.functions.check_status_set_sanitised().call()
    d['face_mask'] = contract.functions.check_status_face_mask().call()
    d['temperature_check'] = contract.functions.check_status_temperature_check().call()
    d['dispatch_time'] = contract.functions.check_status_shipping_time().call()
    return d

receipt = create_contract(0, True, True, True)
d1 = get_checks(receipt)
print(d1)

